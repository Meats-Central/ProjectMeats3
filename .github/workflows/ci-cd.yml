name: CI/CD Pipeline for ProjectMeats3

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing and Linting
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests & Quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_projectmeats
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil  # Ensure health check dependencies

    - name: Set up test environment
      run: |
        # Use centralized environment configuration for CI
        python config/manage_env.py setup development
        cd backend
        # Override database for CI PostgreSQL
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_projectmeats" >> .env

    - name: Validate deployment configuration
      run: |
        cd backend
        python ../test_deployment.py --environment development --validate-only

    - name: Run Django system checks
      run: |
        cd backend
        python manage.py check

    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --noinput

    - name: Run tests
      run: |
        cd backend
        python manage.py test

    - name: Run code quality checks
      run: |
        cd backend
        flake8 . --exclude=migrations,settings_original_backup.py --max-line-length=88
        black --check . --exclude=migrations
        isort --check-only . --skip=migrations

    - name: Python Security Scan (Bandit)
      run: |
        cd backend
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --exit-zero-on-skipped

    - name: Run multi-tenant specific tests
      run: |
        cd backend
        python manage.py test apps.core.tests apps.licensing.tests --verbosity=2

  # Frontend Testing and Linting
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests & Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend Security Audit
      run: |
        cd frontend
        npm audit --audit-level=moderate || true
        npm audit --json > npm-audit.json || true

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || echo "Type checking not configured yet"

    - name: Run linting
      run: |
        cd frontend
        npm run lint || echo "Linting not configured yet"

    - name: Run tests
      run: |
        cd frontend
        npm run test:ci || npm test -- --watchAll=false --coverage

    - name: Build for production
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Digital Ocean App Platform
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Digital Ocean App Platform (Staging)
      uses: digitalocean/app_action@v1
      with:
        app_name: projectmeats3-staging
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://projectmeats.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Digital Ocean App Platform (Production)
      uses: digitalocean/app_action@v1
      with:
        app_name: projectmeats3-production
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Health Check
      run: |
        pip install requests
        sleep 60  # Wait for deployment to complete
        python health_check.py https://projectmeats.app --verbose || exit 1

    - name: Notify Deployment Success
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "Application is live at: https://projectmeats.app"