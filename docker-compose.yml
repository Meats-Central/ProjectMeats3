version: '3.8'

# ProjectMeats3 Docker Compose Configuration
# For development usage. Production configurations are in config/deployment/

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=projectmeats_dev
      - POSTGRES_USER=projectmeats
      - POSTGRES_PASSWORD=development_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U projectmeats"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - projectmeats-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - /app/venv
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql://projectmeats:development_password@db:5432/projectmeats_dev
    env_file:
      - ./backend/.env
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - projectmeats-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - projectmeats-network

volumes:
  postgres_data:

networks:
  projectmeats-network:
    driver: bridge